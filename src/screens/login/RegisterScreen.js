import React, { useState } from 'react'
import { View, StyleSheet, TouchableOpacity } from 'react-native'
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";

import { Text } from 'react-native-paper'
import Background from '../../components/Background'
import Logo from '../../components/Logo'
import Header from '../../components/Header'
import Button from '../../components/Button'
import TextInput from '../../components/TextInput'
import BackButton from '../../components/BackButton'
import { theme } from '../../core/theme'
import { emailValidator } from '../../helpers/emailValidator'
import { passwordValidator, nameValidator } from '../../helpers/passwordValidator'
import { handleNetwork } from "../../components/checkNetwrok";
import endpoint from '../../config/Endpoints';
import API_BASE_URL from '../../config/Config';
import { mobileValidator } from '../../helpers/mobileValidator';


export default function RegisterScreen({ navigation }) {
  const [name, setName] = useState({ value: '', error: '' })
  //  const [email, setEmail] = useState({ value: '', error: '' })
  const [mobile, setMobile] = useState({ value: '', error: '' })

  const [password, setPassword] = useState({ value: '', error: '' })
  const [confirmpassword, setConfirmpasswordPassword] = useState({ value: '', error: '' })

  const onSignUpPressed = async () => {
    let error = false;
    const nameError = nameValidator(name.value);
    //const emailError = emailValidator(email.value);
    const mobileError = mobileValidator(mobile.value);
    const passwordError = passwordValidator(password.value);
    const confirmPasswordError = confirmPasswordValidator(
      password.value,
      confirmpassword.value
    );
    if (mobileError || passwordError || nameError || confirmPasswordError) {
      setName({ ...name, error: nameError })
      setMobile({ ...mobile, error: mobileError })
      setPassword({ ...password, error: passwordError })
      setConfirmpasswordPassword({ ...confirmpassword, error: confirmPasswordError });

      error = true;
      return
    }
    if (!error) {

      const network = await handleNetwork();
      console.log("network", API_BASE_URL + endpoint);

      if (network) {
        const requestData = {
          "frm_mode": "register",
          "device_uuid": "aaaaaa",
          "device_code": "autogeneratedcode",
          "language_prefered": "english",
          "full_name": name.value,
          "mobile_number": mobile.value,
          "password": password.value

        };
        try {
          const response = await axios.post(API_BASE_URL + endpoint.register, requestData, {
            headers: {
              'Content-Type': 'application/json', // Set the content type to JSON
            },
          });

          // Handle successful response
          console.log(response.data);
          if (response.data.status) {
            navigation.navigate("OtpVerificationScreen", {
              mobile: mobile.value,
              full_name: name.value,
              user_id: response.data.user_id,
              // Add more parameters as needed
            });
            // navigation.navigate("OtpVerificationScreen");
            // navigation.reset({
            //   index: 0,
            //   routes: [{ name: 'OtpVerificationScreen' }],
            // })
          } else {
            console.log(response.data.message);
            alert(response.data.message);
            return false;
          }


        } catch (error) {
          // Handle error
          console.error("error", error);
        }
      } else {

      }

    }
    // navigation.reset({
    //   index: 0,
    //   routes: [{ name: 'Dashboard' }],
    // })
  }

  function confirmPasswordValidator(password, confirmPassword) {
    if (!confirmPassword) return "Confirm Password can't be empty."
       
    if (password !== confirmPassword) {
      return 'Passwords do not match';
    }
  
    // Add additional password validation logic if needed
  
    return ''; // Return an empty string if there are no errors
  }

  return (
    <Background>
      {<BackButton goBack={navigation.goBack} />}
      <Logo />
      <Header>Create Account</Header>
      <TextInput
        label="Name"
        returnKeyType="next"
        value={name.value}
        onChangeText={(text) => setName({ value: text, error: '' })}
        error={!!name.error}
        errorText={name.error}
      />
      {/* <TextInput
        label="Email"
        returnKeyType="next"
        value={email.value}
        onChangeText={(text) => setEmail({ value: text, error: '' })}
        error={!!email.error}
        errorText={email.error}
        autoCapitalize="none"
        autoCompleteType="email"
        textContentType="emailAddress"
        keyboardType="email-address"
      /> */}
      <TextInput
        label="Mobile"
        returnKeyType="next"
        value={mobile.value}
        onChangeText={(text) => setMobile({ value: text, error: '' })}
        error={
          mobile.error
            ? mobile.error
            : ""
        }
        autoCapitalize="none"
        textContentType="telephoneNumber"
      />
      <TextInput
        label="Password"
        returnKeyType="done"
        value={password.value}
        onChangeText={(text) => setPassword({ value: text, error: '' })}
        error={!!password.error}
        errorText={password.error}
        secureTextEntry
      />
      <TextInput
        label="Confirm Password"
        returnKeyType="done"
        value={confirmpassword.value}
        onChangeText={(text) => setConfirmpasswordPassword({ value: text, error: '' })}
        error={!!confirmpassword.error}
        errorText={confirmpassword.error}
        secureTextEntry
      />
      <Button
        mode="contained"
        onPress={onSignUpPressed}
        style={{ marginTop: 24 }}
      >
        Sign Up
      </Button>
      <View style={styles.row}>
        <Text>Already have an account? </Text>
        <TouchableOpacity onPress={() => navigation.replace('LoginScreen')}>
          <Text style={styles.link}>Login</Text>
        </TouchableOpacity>
      </View>
    </Background>
  )
}

const styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    marginTop: 4,
  },
  link: {
    fontWeight: 'bold',
    color: theme.colors.primary,
  },
})
